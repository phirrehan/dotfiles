#!/bin/bash

manual() {
  echo -e "\nUsage: $0 [OPTIONS]\n"
  echo "[OPTIONS]                   [FUNCTIONS]"
  echo "-n <number_of_passwords>    generate given number of passwords"
  echo "--help ,-h                  show this help"
}

# Check for dependencies
[ ! -f "$HOME/.local/bin/clipboard" ] && 
  echo "Dependency $HOME/.local/bin/clipboard not found." &&
  exit 1

declare -a password     # Declare array for passwords

# Arguments
for i in $(seq 1 $#); do

  j=$(expr $i + 1) # j = i + 1
  [ "${!i}" = "-h" -o "${!i}" = "--help" ] &&
    manual && exit 0
  [ "${!i}" = "-n" ] && total_passwords=${!j}
done

# Check for errors
[[ ! $total_passwords =~ ^[0-9]+$ ]] &&
  echo "Argument must be a number(positive integer). \
  Usage: $0 -n <number>" && exit 2
  [ "$total_passwords" -le 0 ] &&
    echo "Invalid number of passwords." && exit 3

# Print the line in Yellow color
echo -e "\n\e[0;32mThis is a simple password generator for linux.\e[0m"

echo "Enter the length of the password: "
read pass_length
[[ ! $pass_length =~ ^[0-9]+$ ]] &&
  echo "Error: Enter a number(integer) for password length." && exit 4
[ $pass_length -lt 1 ] && echo "Invalid length of password" && exit 5
[ $pass_length -gt 65 ] && echo "Warning: Maximum Length is 65 characters."

# Output passwords in Cyan color
echo -e "\e[0;36m"
for num in $(seq $total_passwords); do
  echo -n "$num) "
  password[num]=$(openssl rand -base64 48 | cut -c1-$pass_length)
  echo ${password[num]}
done

echo -e "\e[0m\n"
echo "Choose one of the Passwords: "
read ans
$HOME/.local/bin/clipboard "${password[$ans]}"
